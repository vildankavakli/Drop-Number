/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Project;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;

/**
 *
 * @author ASUS
 */
public class VildanKavakliTest extends javax.swing.JFrame {

    VildanKavakliMultiLinkedList<Integer> liste;
    int[][] matrix = {{2, 0}, {2, 3}, {4, 1}, {2, 2}, {4, 4},
    {2, 1}, {4, 4}, {8, 0}, {8, 0}, {32, 1},
    {2, 2}, {64, 2}, {16, 3}, {64, 1}, {32, 2},
    {16, 0}, {16, 4}, {32, 2}, {64, 1}, {8, 3}, {4, 3},
    {2, 3}, {2, 3}, {2, 1}, {64, 2}, {32, 2},
    {16, 2}, {8, 2}, {8, 2}, {4, 1}, {8, 1}};

    int[][] paintMatrix;
    int nextIndex = 0;

    /**
     * Creates new form Test
     */
    @Override
    public void paint(Graphics g) { //This code is an implementation of the paint method, which is responsible for drawing the game board on the screen. 
        super.paint(g);
        Graphics2D pen = (Graphics2D) g;

        for (int i = 0; i < 7; i++) {//A nested loop iterates over the cells of the game board, drawing each one.
            for (int j = 0; j < 5; j++) {

                pen.setColor(Color.white);
                pen.fillRect(j * 50 + 100, i * 50 + 100, 50, 50);
                pen.setColor(Color.black);
                pen.drawRect(j * 50 + 100, i * 50 + 100, 50, 50);

                if (paintMatrix != null) {
                    switch (paintMatrix[i][j]) { //switch-case used for determine the colors of the entered numbers
                        case 2 ->
                            pen.setColor(Color.pink);
                        case 4 ->
                            pen.setColor(Color.gray);
                        case 8 ->
                            pen.setColor(Color.green);
                        case 16 ->
                            pen.setColor(Color.blue);
                        case 32 ->
                            pen.setColor(Color.orange);
                        case 64 ->
                            pen.setColor(Color.yellow);
                        case 128 ->
                            pen.setColor(Color.magenta);
                        case 256 ->
                            pen.setColor(Color.red);
                    }

                    pen.setFont(new Font("Times New Roman", Font.BOLD, 15));
                    //the pen is configured to use a bold font with a size of 15
                    pen.drawString(String.valueOf(paintMatrix[i][j]), j * 50 + 120, i * 50 + 135);

                }

            }
        }
    }

    public VildanKavakliTest() {
        initComponents();
        //Exception in thread "AWT-EventQueue-0" java.lang.NullPointerException: Cannot read field "up" because "temp" is null

        liste = new VildanKavakliMultiLinkedList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(java.awt.Color.lightGray);

        jButton1.setBackground(java.awt.Color.darkGray);
        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton1.setForeground(java.awt.Color.lightGray);
        jButton1.setText("NEXT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(160, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(461, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        liste.add(matrix[nextIndex][0], matrix[nextIndex][1]);
        paintMatrix = liste.fillMatrix();
        nextIndex++;
        if (nextIndex >= matrix.length) {
            jButton1.setEnabled(false);

        }
        repaint();
        /*
        This is an actionPerformed method for a button in a GUI. When the button is clicked, it calls the add method of a linked list object 
        called "liste" and adds the element located in the "nextIndex" row and column 0 and 1 to the linked list. It then calls the fillMatrix 
        method of the linked list object and stores the result in a 2D array called "paintMatrix". The "nextIndex" variable is then incremented.
        If "nextIndex" is greater than or equal to the length of the "matrix" array, the button is disabled. Finally, the repaint() method is 
        called to update the GUI.
         */

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VildanKavakliTest.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VildanKavakliTest.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VildanKavakliTest.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VildanKavakliTest.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VildanKavakliTest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
